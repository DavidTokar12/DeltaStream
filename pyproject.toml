[project]
name = "delta_stream"
version = "0.1.0"
description = "Delta stream makes structured streaming easy and efficient. The primary use case in mind is handling the streaming of structured outputs of LLMs."
readme = "README.md"
requires-python = ">=3.9,<4.0"
license = { text = "MIT" }
authors = [
  { name = "David Tokar", email = "1413david@gmail.com" }
]
keywords = [
  "json", "stream", "parser", "delta", "diff", "pydantic", "llm",
  "ai", "openai", "claude", "anthropic", "streaming", "llm output",
  "structured data"
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Text Processing :: JSON",
  "Typing :: Typed"
]
dependencies = [
  "pydantic>=2.0,<3.0"
]

[project.urls]
Repository = "https://github.com/DavidTokar12/DeltaStream"
Homepage = "https://github.com/DavidTokar12/DeltaStream"

[optional-dependencies.dev]
ruff = "^0.7.2"
mypy = "^1.13.0"
pytest = "^8.3.3"
black = "^25.1.0"
pytest-cov = "^6.1.1"

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.ruff]
extend-exclude = [
  "docs/",
  "test/",
]
fix = true
line-length = 88
target-version = "py310"

[tool.ruff.lint]
extend-select = [
  "B", "C4", "ERA", "I", "N", "PIE", "PGH", "RUF", "SIM", "T20", "TCH", "TID", "UP"
]
ignore = [
  "B904", "B905", "ERA001", "RUF009", "TCH002", "TCH001"
]
extend-safe-fixes = ["TCH"]
unfixable = ["ERA"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
force-single-line = true
lines-between-types = 1
lines-after-imports = 2
known-first-party = ["poetry"]
known-third-party = ["poetry.core"]
required-imports = ["from __future__ import annotations"]

[tool.mypy]
files = "src, tests"
mypy_path = "src"
namespace_packages = true
explicit_package_bases = true
strict = true
enable_error_code = [
  "ignore-without-code",
  "redundant-expr",
  "truthy-bool"
]
exclude = [
  "docs/",
  "test/",
  "assets/"
]

[tool.pytest.ini_options]
pythonpath = ["src"]
minversion = "6.0"
testpaths = ["tests"]
